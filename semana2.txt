SEMANA 2.

//// SQL - POSTGRES

16/09.

1- 

a) Fazer a instalação do Postgresql em sua máquina.
b) Acessar a shell do Postgresql.
c) Listar os usuários.
d) Criar a primeira tabela usuários (id -> PK; name -> VARCHAR(32), age -> INTEGER).

** Desafio -> Criar o primeiro banco de dados e listá-lo.

17/09.

1-

a) Baixar o Beekeeper e fazer a conexão com seu Postgres local e criar o primeiro banco de dados (firstdb)
b) Criar uma tabela de usuários agora nesse banco (id -> PK; name -> VARCHAR(32), age -> INTEGER).

2- 

a) Adicionar o primeiro usuário na tabela usuários.
b) Adicionar o segundo usuário na tabela usuários.
c) Adicionar 2 usuários na mesma query na tabela usuários.
d) Retornar todos usuários da tabela.
e) Deletar a tabela usuários.

** Desafio -> Recriar a tabela usuários com uma constraint de aceitar idade apenas maior que 12.

18/09.

1- 

a) Se não tiver criada, recriar a tabela de usuarios da aula anterior com os mesmos campos (id -> PK; name -> VARCHAR(32), age -> INTEGER).
b) Adicionar mais uma coluna na tabela usuarios utilizando o ADD COLUMN (email -> VARCHAR(64))
c) Adicionar mais uma coluna na tabela usuarios utilizando o ADD COLUMN (isAdmin -> BOOLEAN DEFAULT FALSE)
d) Alterar o nome da coluna "name" para "first_name"
e) Adicionar mais uma coluna na tabela usuarios utilizando o ADD COLUMN (last_name -> VARCHAR(32) NOT NULL)
f) Fazer a criação de um ou mais usuários com idade maior que 20 anos.
g) Deletar os usuarios com idade maior que 20 anos retornando tudo.
h) Altere o "isAdmin" de um dos usuarios para true.


** Desafio 1 -> Selecione todos os usuarios com o campo isAdmin = false ordenado pela idade.
** Desafio 2 -> Selecione todos os usuarios e retorne a quantidade de usuarios (COUNT.)

19/09.

1- 

a) Crie uma nova tabela "products" ("ID" -> SERIAL PK; "name" -> VARCHAR(100) NOT NULL; "description" VARCHAR(255); "in_stock" -> BOOLEAN NOT NULL; "price" FLOAT)
b) Utilize a query em query.sql para popular a tabela "products"
c) Selecione todas colunas dos produtos que começam com a letra "S".
d) Selecione a conta dos produtos que começam com a letra "S".
e) Selecione o produto com maior "price".
f) Faça a soma de todos "price".
g) Selecione todas colunas de todos produtos ordenando por "name".
h) Selecione todos produtos com "in_stock" = true agrupando por "in_stock"
i) Retorne a média do "price" de todos produtos.

** Desafio 1 -> Adicione mais uma coluna (category -> VARCHAR(60)) 
** Desafio 2 -> Atualize essa coluna para que ela não aceite valores nulos (Fazer a correção necessária para a query funcionar adicionando a constraint)

20/09.

1-

a) Crie uma nova tabela "evaluation" ("ID" -> SERIAL PK, "description" TEXT, "rating" -> INT de 0 a 5 NOT NULL, "product_id" -> FK product.id com deleção em cascata)
b) Faça a inserção de dados nessa tabela criada referenciando os produtos avaliados (obrigatoriamente um deles sem descrição.)
c) Selecione os dados da tabela de produtos juntamente com as de avaliações.
d) Selecione os produtos que tiveram avaliação igual ou acima de "rating" 4.
e) Selecione os produtos que a avaliação = NULL.
f) Faça a contagem do total de linhas na tabela de avaliações.
g) Delete um dos produtos da tabela produtos.
h) Faça a contagem do total de linhas na tabela de avaliações.

Extra:

i) Crie mais uma tabela para referenciar a tabela produtos "store" ("ID" -> SERIAL PK, "name" VARCHAR(64) NOT NULL, "city" -> VARCHAR(64))
j) Faça uma modificação na tabela de produtos para aceitar uma FK store_id.
k) Adicione valores a tabela "store"
l) Faça um update na tabela de produtos para adicionar os ids das lojas criadas.
m) Selecione todas lojas que possuem produtos em estoque.